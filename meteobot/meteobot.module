<?php
/**
 * @file
 * A block module that displays weather data form Meteobot API.
 */

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function meteobot_help($path, $arg) {
  switch ($path) {
    case "admin/help#meteobot":
      $output = '';
      $output .= '<h2>' . t('About') . '</h2>';
      $output .= '<p>' . t('Displays weather data from Meteobot API');
      return $output;
    break;
  }
}

/**
 * Implements hook_menu()
 *
 * Registered paths
 */
function meteobot_menu() {
  $items = array();

  // The path that list wether data from db table "meteobot"
  $items['api/meteo'] = array(

    // The name of the function called when the path is accessed
    'page callback' => 'meteobot_json_callback',
    // Set this value to TRUE to allow access to any user
    'access callback' => TRUE,
    // Declare this as a simple registered path
    'type' => MENU_CALLBACK,
  );

  // The path for testing meteobot.com API
  $items['api/export.meteobot.com'] = array(
    'page callback' => 'meteobot_com_api',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Return the $items array to register the path
  return $items;
}

/**
 * Function that return JSON data from "meteobot" db table
 */
function meteobot_json_callback($period = 'daily') {

  // Create a SelectQuery object using the 'meteobot' db table
  $query = db_select('meteobot');

  // Add the fields to query
  $query->addField('meteobot', 'wid');
  $query->addField('meteobot', 'sid');
  $query->addField('meteobot', 'created');
  $query->addField('meteobot', 'air_temperature');
  $query->addField('meteobot', 'air_pressure');
  $query->addField('meteobot', 'air_humidity');
  $query->addField('meteobot', 'dew_point');
  $query->addField('meteobot', 'earth_humidity_1');
  $query->addField('meteobot', 'earth_humidity_2');
  $query->addField('meteobot', 'earth_humidity_3');
  $query->addField('meteobot', 'earth_temperature_1');
  $query->addField('meteobot', 'earth_temperature_2');
  $query->addField('meteobot', 'earth_temperature_3');
  $query->addField('meteobot', 'leaf_wetness_1');
  $query->addField('meteobot', 'leaf_wetness_2');
  $query->addField('meteobot', 'precipitation');
  $query->addField('meteobot', 'wind_direction');
  $query->addField('meteobot', 'wind_speed');
  $query->addField('meteobot', 'solar_radiation');

  // define $start_time for requested time period
  switch ($period) {
    case 'hourly':
      $start_time = '-1 hour';
      break;
    case 'daily':
      $start_time = '-1 day';
      break;
    case 'weekly':
      $start_time = '-7 day';
      break;
    case 'monthly':
      $start_time = '-30 day';
      break;
    default:
      $start_time = 0;
      break;
  }

  // define $end_time for requested time period
  $end_time = time();

  // Only return records that were created between $start_time and $end_time
  $query->condition('meteobot.created', array(strtotime($start_time), $end_time), 'BETWEEN');

  // Run the query and get the results as an array of objects
  $data = $query->execute()->fetchAll();

  return drupal_json_output($data);
}

/**
 * Function that return JSON data from export.meteobot.com API
 */
function meteobot_com_api(){

  module_load_include('inc', 'meteobot', 'includes/config.php');
  module_load_include('inc', 'meteobot', 'includes/functions.php');

  // api authentification array
  $api_auth = getApiAuth();

  // api authentification variables
  $id = $api_auth['sid'];
  $username = $api_auth['username'];
  $password = $api_auth['password'];
  $api_url = $api_auth['api_url'];

  // start and end times of the time period
  $s_time = date('Y-m-d H:i', strtotime('-10 min'));
  $e_time = date('Y-m-d H:i', time());

  // query array
  $data = array(
    'id' => $id,
    'startTime' => $s_time,
    'endTime' => $e_time,
  );

  $options = array(
    'method' => 'GET',
    'data' => $data,
    'headers' => array('Content-Type' => 'application/json'),
  );

  $url = 'https://'.$username.':'.$password.'@'.$api_url;
  $full_url = url($url, array('query' => $data));

  $response = drupal_http_request($full_url, $options);

  // $response->data JSON string to array
  $lines = explode("\n", $response->data);
  $keys = explode(';', $lines[0]);
  $vals = explode(';', $lines[1]);
  $result = array_combine($keys, $vals);

  // check if time of new weather data not equal to time of last record in table "meteobot"
  $time_of_last_record = timeOfLastRecord();
  $created = strtotime($result['date'] . ' ' . $result['time']);

  if($created != $time_of_last_record) {
    // if not equal insert data to table "meteobot"
    $inserted = db_insert('meteobot')
      ->fields(array(
        'sid' => $result['id'],
        'created' => $created,
        'air_temperature' => $result['airTemperature'],
        'air_pressure' => $result['airPressure'],
        'air_humidity' => $result['airHumidity'],
        'dew_point' => $result['dewPoint'],
        'earth_humidity_1' => $result['earthHumidity1'],
        'earth_humidity_2' => $result['earthHumidity2'],
        'earth_humidity_3' => $result['earthHumidity3'] = 0,
        'earth_temperature_1' => $result['earthTemperature1'],
        'earth_temperature_2' => $result['earthTemperature2'] = 0,
        'earth_temperature_3' => $result['earthTemperature3'] = 0,
        'leaf_wetness_1' => $result['leafWetness1'],
        'leaf_wetness_1' => $result['leafWetness2'] = 0,
        'precipitation' => $result['precipitation'],
        'wind_direction' => $result['windDirection'],
        'wind_speed' => $result['windSpeed'],
        'solar_radiation' => $result['solarRadiation']
      ))
      ->execute();
      echo 'New wid on the table "meteobot": '.$inserted;
  } else {
    echo 'New time: '.$created . ', old time: ' . $time_of_last_record;
  }

}


/**
 * Implements hook_block_info().
 */
function meteobot_block_info() {
  $blocks['meteobot'] = array(
    // The name that will appear in the block list.
    'info' => t('Meteobot'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block.
 */
function meteobot_block_view($delta = '') {

  $block = array();

  switch ($delta) {
    case 'meteobot':
      $block['subject'] = t('Meteobot');
      // $block['content'] = t('Bidnit Ä‡e weather data ...');
      $block['content'] = array(
        '#attached' => array(
          'css' => array(
            drupal_get_path('module', 'meteobot') . '/css/meteobot.css',
          ),
          'js' => array(
            'https://www.gstatic.com/charts/loader.js',
            drupal_get_path('module', 'meteobot') . '/js/meteobot.js',
          ),
        ),
        '#markup' => 'Block Content',
      );
      break;
    }
    return $block;

}
