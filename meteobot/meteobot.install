<?php

/**
 * @file
 * Install, update and uninstall functions for the meteobot module.
 */

/**
 * Implements hook_schema().
 */
function meteobot_schema() {
  $schema['meteobot'] = array(
    'description' => 'Stores weather data from Meteobot weather stations.',
    'fields' => array(
      'wid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique record ID.',
      ),
      'sid' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Unique identifier of weather station.',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Local date and time of the weather station. The time that the weather record was created, as a Unix timestamp.',
      ),
      'air_temperature' => array(
        'type' => 'numeric',
        'precision' => 3,
        'scale' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Air temperature in Celsius degrees.',
      ),
      'air_pressure' => array(
        'type' => 'numeric',
        'unsigned' => TRUE,
        'precision' => 5,
        'scale' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Atmospheric pressure in hPa.',
      ),
      'air_humidity' => array(
        'type' => 'numeric',
        'unsigned' => TRUE,
        'precision' => 4,
        'scale' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Air humidity in percentage.',
      ),
      'dew_point' => array(
        'type' => 'numeric',
        'precision' => 3,
        'scale' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Temperature, in Celsius degrees, below which water droplets begin to condense and dew can form.',
      ),
      'earth_humidity_1' => array(
        'type' => 'numeric',
        'unsigned' => TRUE,
        'precision' => 4,
        'scale' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Soil moisture at port 1, depth set by user.',
      ),
      'earth_humidity_2' => array(
        'type' => 'numeric',
        'unsigned' => TRUE,
        'precision' => 4,
        'scale' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Soil moisture at port 2, depth set by user.',
      ),
      'earth_humidity_3' => array(
        'type' => 'numeric',
        'unsigned' => TRUE,
        'precision' => 4,
        'scale' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Soil moisture at port 3, depth set by user.',
      ),
      'earth_temperature_1' => array(
        'type' => 'numeric',
        'precision' => 3,
        'scale' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Soil temperature at port 1, depth set by user.',
      ),
      'earth_temperature_2' => array(
        'type' => 'numeric',
        'precision' => 3,
        'scale' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Soil temperature at port 2, depth set by user.',
      ),
      'earth_temperature_3' => array(
        'type' => 'numeric',
        'precision' => 3,
        'scale' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Soil temperature at port 3, depth set by user.',
      ),
      'leaf_wetness_1' => array(
        'type' => 'numeric',
        'unsigned' => TRUE,
        'precision' => 3,
        'scale' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Leaf wetness percent in a shaded part of the crop.',
      ),
      'leaf_wetness_2' => array(
        'type' => 'numeric',
        'unsigned' => TRUE,
        'precision' => 3,
        'scale' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Leaf wetness percent outside the crop canopy.',
      ),
      'precipitation' => array(
        'type' => 'numeric',
        'unsigned' => TRUE,
        'precision' => 4,
        'scale' => 2,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Accumulated precipitation in millimeters. Resolution is usually 0.25 mm.',
      ),
      'wind_direction' => array(
        'type' => 'numeric',
        'unsigned' => TRUE,
        'precision' => 4,
        'scale' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The direction from which the wind blows. Represented as degrees on compass rose, from 0 (North) to 359.',
      ),
      'wind_speed' => array(
        'type' => 'numeric',
        'unsigned' => TRUE,
        'precision' => 3,
        'scale' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Wind speed in meters per second.',
      ),
      'solar_radiation' => array(
        'type' => 'numeric',
        'unsigned' => TRUE,
        'precision' => 5,
        'scale' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Shortwave radiation received fromthe Sun measured in power per unit area (W/m2).',
      ),
    ),
    'indexes' => array(
      'station_id' => array(
        'sid',
      ),
    ),
    'primary key' => array('wid'),
  );
  return $schema;
}

/**
 * Implementation of hook_install().
 */
function meteobot_install(){

  module_load_include('inc', 'meteobot', 'includes/config.php');
  module_load_include('inc', 'meteobot', 'includes/functions.php');

  // get api authentification array
  $api_auth = getApiAuth();

  // grab last 10 day from meteobot.com API '-10 day', '0 hour'
  $api_data = getApiData($api_auth, '-7 day', '0 hour');

  // var_dump($api_data[0]);
  for ($i=0; $i < count($api_data); $i++) {

    $weather_data = $api_data[$i];
    $created = strtotime($weather_data['date'] . ' ' . $weather_data['time']);

    // check if in db tabme "meteobot" exist record with created

    // Create a SelectQuery object using the 'meteobot' db table
    $query = db_select('meteobot');

    // Add the fields to query
    $query->addField('meteobot', 'created');

    // Only return records that were created between $start_time and $end_time
    $query->condition('meteobot.created', $created, '=');

    $lkj = $query->execute()->fetchAll();

    if(!$lkj){
      // save to database ======================================
      $inserted = db_insert('meteobot')
      ->fields(array(
        'sid' => $weather_data['id'],
        'created' => $created,
        'air_temperature' => $weather_data['airTemperature'],
        'air_pressure' => $weather_data['airPressure'],
        'air_humidity' => $weather_data['airHumidity'],
        'dew_point' => $weather_data['dewPoint'],
        'earth_humidity_1' => $weather_data['earthHumidity1'],
        'earth_humidity_2' => $weather_data['earthHumidity2'],
        'earth_humidity_3' => $weather_data['earthHumidity3'] = 0,
        'earth_temperature_1' => $weather_data['earthTemperature1'],
        'earth_temperature_2' => $weather_data['earthTemperature2'] = 0,
        'earth_temperature_3' => $weather_data['earthTemperature3'] = 0,
        'leaf_wetness_1' => $weather_data['leafWetness1'],
        'leaf_wetness_1' => $weather_data['leafWetness2'] = 0,
        'precipitation' => $weather_data['precipitation'],
        'wind_direction' => $weather_data['windDirection'],
        'wind_speed' => $weather_data['windSpeed'],
        'solar_radiation' => $weather_data['solarRadiation']
      ))
      ->execute();
      echo 'New wid on the table "meteobot": '.$inserted;
    } else {
      echo "ima, ne upisuj !!!!";
    }


  }


}
